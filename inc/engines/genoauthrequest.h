
#ifndef _GENOAUTHREQUEST_H_
#define _GENOAUTHREQUEST_H_

#include <QObject>
#include <QUrl>
#include <QMultiMap>

#include "genoauthcommon.h"
#include "genenums.h"

typedef QMultiMap<QString, QString> GenOAuthParameters;


class GenOAuthRequest : public QObject
{
    Q_OBJECT
    friend class GenOAuthManager;
public:
    explicit GenOAuthRequest(QObject *parent = 0);
    ~GenOAuthRequest();

    enum RequestSignatureMethod {
        PLAINTEXT = 0,
        HMAC_SHA1,
        RSA_SHA1
    };

    /**
     * These methods can be overridden in child classes which are different types of
     * OAuth requests.
     */
    // Validate the request of this type.
    virtual bool isValid() const;

    /**
     * These methods are OAuth request type specific and not overridden in child
     * classes.
     * NOTE: Refactoring still a TODO
     */
    // Initialize the request of this type.
    void initRequest(GenWSAuthenticationType type, const QUrl &requestEndpoint);

    void setConsumerKey(const QString &consumerKey);
    void setConsumerSecretKey(const QString &consumerSecretKey);

    // Mandator methods for acquiring a access token
    void setTokenSecret(const QString &tokenSecret);
    void setToken(const QString &token);

    // Request signature method to use - HMAC_SHA1 currently only supported
    void setSignatureMethod(GenOAuthRequest::RequestSignatureMethod = GenOAuthRequest::HMAC_SHA1);

    // Request's HTTP method.
    void setHttpMethod(GenHTTPRequestType = HttpPOST);
    GenHTTPRequestType httpMethod() const;

    // Additional optional parameters to the request.
    void setAdditionalParameters(const GenOAuthParameters &additionalParams);
    void setAdditionalParameters(const QList<QPair<QString, QString> > &additionalParams);
    GenOAuthParameters additionalParameters() const;
    QList<QByteArray> requestParameters();  // This will return all request's parameters in the raw format given
    // to the QNetworkRequest.
    QByteArray requestBody() const;         // This will return the POST body as given to the QNetworkRequest.

    GenWSAuthenticationType requestType() const;
    QUrl requestEndpoint() const;

    void clearRequest();
    void insertPostBody(const QByteArray &body);

private:    
    Q_DISABLE_COPY(GenOAuthRequest)

    // Helper methods to get the values for the OAuth request parameters.
    QString oauthTimestamp() const;
    QString oauthNonce() const;
    QString oauthSignature();

    // Utility methods for making the request happen.
    void prepareRequest();
    void signRequest();
    bool validateRequest() const;
    QByteArray requestBaseString();
    QByteArray encodedParamaterList(const QList< QPair<QString, QString> > &requestParameters);
    void insertAdditionalParams(QList< QPair<QString, QString> > &requestParams);
    
private: // DATA
    
    QUrl _oauthRequestEndpoint;
    GenHTTPRequestType _oauthHttpMethod;
    QString _oauthHttpMethodString;
    QString _oauthConsumerKey;
    QString _oauthConsumerSecretKey;
    QString _oauthToken;
    QString _oauthTokenSecret;
    QString _oauthSignatureMethod;
    QUrl _oauthCallbackUrl;
    QString _oauthVersion;

    // These will be generated by the helper methods
    QString _oauthTimestamp_;
    QString _oauthNonce_;

    // User specified additional parameters needed for the request.
    QMultiMap<QString, QString> _additionalParams;

    // The raw POST body content as given to the HTTP request.
    QByteArray _postBodyContent;

    // All the parameters associated with this request. These parameters
    // are used in the "Authorized" header of the HTTP request.
    QList< QPair<QString, QString> > _requestParameters;

    GenWSAuthenticationType _requestType;
};

#endif // _GENOAUTHREQUEST_H_
